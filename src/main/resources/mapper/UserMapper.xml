<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="me.hackathon.root.repository.user.UserMapper">
  <sql id="UserColumns">
          user.id
        , user.grade
        , user.email
        , user.phone_number
        , user.name
        , user.address
        ,	user.status
        , user.created_time
        , user.birth
        , user.profile_url
        , user.vlt_time
      </sql>

  <select id="selectUserById" parameterType="map" resultType="User">
    SELECT
    /* user.selectUserById */
    <include refid="UserColumns" />
    FROM
    user
    WHERE
    id = #{id}
  </select>

  <select id="selectUserByEmail" parameterType="map" resultType="int">
    SELECT
    /* user.selectUserByEmail */
      count(*)
    FROM
      user
    WHERE
      email = #{email}
  </select>

  <select id="login" resultType="User" parameterType="map">
    SELECT
    /* user.login */
    <include refid="UserColumns" />
    FROM
    user
    WHERE
    email = #{email}
    AND password = #{password}
  </select>

  <select id="selectUserListByIds" resultType="User" parameterType="map">
    SELECT
    /* user.selectUserListByIds */
    <include refid="UserColumns" />
    FROM
    user
    WHERE
    id IN
    <foreach collection="userIds" item="userId" separator="," open="(" close=")">
      #{userId}
    </foreach>
  </select>

  <insert id="insertUser" parameterType="map">
       INSERT INTO /* user.insertUser */
        user(grade, email, password, phone_number, `name`, address, status, created_time, birth, profile_url, vlt_time)
        value(#{grade}, #{email}, #{password}, #{phoneNumber}, #{name}, #{address}, #{status}, NOW(), #{birth}, #{profileUrl}, #{vltTime})
  </insert>

  <update id="updateUserById" parameterType="map">
      UPDATE /* user.updateUserById */
        user
      SET
        status = #{status}
      WHERE
        id = #{id}
    </update>

  <update id="uploadUserProfile" parameterType="map">
    UPDATE /* user.uploadUserProfile */
      user
    SET
      profile_url = #{profileUrl};
    WHERE
      id = #{userId}
  </update>

  <update id="updateUserGrade" parameterType="map">
    UPDATE /* user.updateUserGrade */
      user
    SET
      grade = #{userGrade}
    WHERE
      id = #{userId}
  </update>

  <update id="deleteUserById" parameterType="map">
      UPDATE /* user.deleteUserById */
        user
      SET
        status = 1
      WHERE
        id = #{id}
    </update>


</mapper>
